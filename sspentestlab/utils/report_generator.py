import os
import docx
import subprocess
import platform
from docx2pdf import convert
from datetime import datetime
from rich.console import Console
import json

console = Console()
def replace_placeholder(doc, placeholder, replacement):
    """Replace placeholder text in the Word document."""
    
    # helper function to replace in a paragraph
    def replace_in_paragraph(para, placeholder, replacement):
        if placeholder in para.text:
            # debugging.
            # print(f"Found placeholder '{placeholder}' in paragraph: {para.text}").
            # join all runs together to make a single string.
            full_text = ''.join([run.text for run in para.runs])
            # Replace the placeholder in the full text
            full_text = full_text.replace(placeholder, replacement)
            # clear all runs in the paragraph.
            for run in para.runs:
                run.text = ''
            # redistribute the full text into runs.
            para.runs[0].text = full_text
    
    # process paragraphs in the document.
    for para in doc.paragraphs:
        replace_in_paragraph(para, placeholder, replacement)

    # process table cells.
    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                for para in cell.paragraphs:
                    replace_in_paragraph(para, placeholder, replacement)



def json_to_content(json_data):
    """Convert JSON data to formatted content for Word document."""
    
    commands_executed = '\n'.join(f"- {cmd}" for cmd in json_data.get('commands_executed', []))
    summary_results = (
        f"- Total Commands Executed: {json_data['summary_results'].get('total_commands', 0)}\n"
        f"- Successful Commands: {json_data['summary_results'].get('successful_commands', 0)}\n"
        f"- Failed Commands: {json_data['summary_results'].get('failed_commands', 0)}\n")
    vulnerabilities_found = (
        "No vulnerabilities found." if not json_data.get('vulnerabilities_found', []) else
        '\n'.join(f"- {vuln}" for vuln in json_data['vulnerabilities_found']))
    additional_information = json_data.get('additional_information', 'No additional information.')

    return commands_executed, summary_results, vulnerabilities_found, additional_information


    
def convert_pdf_linux(docx_path, pdf_path):     
    """Convert DOCX to PDF using LibreOffice (only for Linux OS)."""

    try:
        subprocess.run(['libreoffice', '--headless', '--convert-to', 'pdf', docx_path, '--outdir', pdf_path], 
                       check=False, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(f"Error in conversion: {e}")
 


def gpt_to_pdf(json_data_str, output_filename):
    """Convert JSON data to a PDF using a Word template."""
    
    # ensure the JSON string is correctly formatted.
    if not json_data_str.strip():
        print("Invalid JSON input format")
        return
    
    # remove the 'json' keyword and backticks if they exist.
    if json_data_str.strip().startswith('```json'):
        json_data_str = json_data_str.strip()[7:]
    if json_data_str.strip().endswith('```'):
        json_data_str = json_data_str.strip()[:-3]

    # print the cleaned JSON string for debugging.
    # print(f"Cleaned JSON input: {json_data_str.strip()}").

    # parse the JSON string.
    try:
        json_data = json.loads(json_data_str.strip())
    except json.JSONDecodeError as e:
        print(f"Error decoding JSON: {e}")
        return

    # extract content from JSON.
    commands_executed, summary_results, vulnerabilities_found, additional_information = json_to_content(json_data)

    # load the Word template.
    os_system = platform.system()
    if os_system == 'Windows':        
        doc = docx.Document('./utils/template/template.docx')
    elif os_system == 'Linux': 
        doc = docx.Document('/usr/utils/template/template.docx')
        
    # replace placeholders with actual content.
    replace_placeholder(doc, '{{title}}', str(output_filename.strip('.pdf')))
    replace_placeholder(doc, '{{date}}', datetime.now().strftime('%Y-%m-%d'))
    replace_placeholder(doc, '{{commands_executed}}', commands_executed)
    replace_placeholder(doc, '{{summary_results}}', summary_results)
    replace_placeholder(doc, '{{vulnerabilities_found}}', vulnerabilities_found)
    replace_placeholder(doc, '{{additional_information}}', additional_information)
    
    # save the updated document.
    temp_docx_path = f'./logs/reports/{output_filename}.docx'
    os.makedirs(os.path.dirname(temp_docx_path), exist_ok=True)
    doc.save(temp_docx_path)
    
    # Detect the operating system         
    if os_system == 'Windows':        
        try:             
            output_pdf_path = os.path.join('./logs/reports', output_filename + '.pdf')
            convert(temp_docx_path, output_pdf_path)  
            console.print("Report generated!", style="bold green")    
        except Exception as e:             
            console.print(f"Error converting: {e}", style="red")     
    elif os_system == 'Linux': 
        output_pdf_path = os.path.join('./logs/reports')
        convert_pdf_linux(temp_docx_path, output_pdf_path) 
        console.print("Report generated!", style="bold green")
    else: 
        console.print(f"Unsupported operating system: {os_system}", style="red")
    
    os.remove(temp_docx_path)
