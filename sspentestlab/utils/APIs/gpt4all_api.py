import dataclasses
import os
import time
from typing import Any, Dict, List

import loguru
from gpt4all import GPT4All
from tenacity import *

from sspentestlab.utils.llm_api import LLMAPI

logger = loguru.logger
logger.remove()

@dataclasses.dataclass
class Message:
    ask_id: str = None
    ask: dict = None
    answer: dict = None
    answer_id: str = None
    request_start_timestamp: float = None
    request_end_timestamp: float = None
    time_escaped: float = None

@dataclasses.dataclass
class Conversation:
    conversation_id: str = None
    message_list: List[Message] = dataclasses.field(default_factory=list)

    def __hash__(self):
        return hash(self.conversation_id)

    def __eq__(self, other):
        if not isinstance(other, Conversation):
            return False
        return self.conversation_id == other.conversation_id

class GPT4ALLAPI(LLMAPI):
    def __init__(self, config_class, use_langfuse_logging=False):
        self.name = str(config_class.model)
        self.history_length = 2
        self.conversation_dict: Dict[str, Conversation] = {}
        model_path = os.path.join(config_class.model_dir)

        self.model = GPT4All(
            model_name=config_class.model,
            model_path=model_path,
            allow_download=False,
            device="cpu"
        )

    def _chat_completion_fallback(self, history: List) -> str:
        """Fallback when chat session fails, generating based on last message."""

        response = self.model.generate(prompt=history[-1]["content"], top_k=self.history_length)
        return response

    def _chat_completion(self, history: List) -> str:
        """Chat completion using GPT4All's generate method."""

        try:
            # GPT4All does not support complex history? send only the last message ------------------------ check solution ???
            latest_message = history[-1]["content"]
            response = self.model.generate(
                prompt=latest_message, top_k=self.history_length
            )
            return response
        except Exception as e:
            logger.error(f"Error in chat completion: {e}")
            return self._chat_completion_fallback(history)

    def generate_response(self, conversation_id: str, new_message: str) -> str:
        """Generates a response for a conversation, managing history."""

        if conversation_id not in self.conversation_dict:
            self.conversation_dict[conversation_id] = Conversation(conversation_id=conversation_id)

        conversation = self.conversation_dict[conversation_id]
        message = Message(ask={"content": new_message}, ask_id=str(len(conversation.message_list)))

        conversation.message_list.append(message)

        history = [{"role": "user", "content": msg.ask["content"]} for msg in conversation.message_list]

        response = self._chat_completion(history)

        # Store the answer in the conversation
        message.answer = {"content": response}
        conversation.message_list[-1] = message

        return response